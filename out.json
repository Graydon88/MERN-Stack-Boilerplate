{
       _readableState: ReadableState {
         objectMode: false,
         highWaterMark: 16384,
         buffer: BufferList { head: null, tail: null, length: 0 },
         length: 0,
         pipes: [],
         flowing: true,
         ended: true,
         endEmitted: true,
         reading: false,
         sync: false,
         needReadable: false,
         emittedReadable: false,
         readableListening: false,
         resumeScheduled: false,
         errorEmitted: false,
         emitClose: true,
         autoDestroy: false,
         destroyed: false,
         errored: null,
         closed: false,
         closeEmitted: false,
         defaultEncoding: 'utf8',
         awaitDrainWriters: null,
         multiAwaitDrain: false,
         readingMore: false,
         decoder: null,
         encoding: null,
         [Symbol(kPaused)]: false
       },
       _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
       _eventsCount: 1,
       _maxListeners: undefined,
       socket: <ref *1> Socket {
         connecting: false,
         _hadError: false,
         _parent: null,
         _host: null,
         _readableState: ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: [],
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           errorEmitted: false,
           emitClose: false,
           autoDestroy: false,
           destroyed: false,
           errored: null,
           closed: false,
           closeEmitted: false,
           defaultEncoding: 'utf8',
           awaitDrainWriters: null,
           multiAwaitDrain: false,
           readingMore: false,
           decoder: null,
           encoding: null,
           [Symbol(kPaused)]: false
         },
         _events: [Object: null prototype] {
           end: [Array],
           timeout: [Function: socketOnTimeout],
           data: [Function: bound socketOnData],
           error: [Array],
           close: [Array],
           drain: [Function: bound socketOnDrain],
           resume: [Function: onSocketResume],
           pause: [Function: onSocketPause]
         },
         _eventsCount: 8,
         _maxListeners: undefined,
         _writableState: WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite: [Function: bound onwrite],
           writecb: null,
           writelen: 0,
           afterWriteTickInfo: null,
           buffered: [],
           bufferedIndex: 0,
           allBuffers: true,
           allNoop: true,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           emitClose: false,
           autoDestroy: false,
           errored: null,
           closed: false,
           closeEmitted: false
         },
         allowHalfOpen: true,
         _sockname: null,
         _pendingData: null,
         _pendingEncoding: '',
         server: Server {
           maxHeaderSize: undefined,
           insecureHTTPParser: undefined,
           _events: [Object: null prototype],
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: [TCP],
           _usingWorkers: false,
           _workers: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 0,
           keepAliveTimeout: 5000,
           maxHeadersCount: null,
           headersTimeout: 60000,
           requestTimeout: 0,
           _connectionKey: '6::::5000',
           [Symbol(IncomingMessage)]: [Function: IncomingMessage],
           [Symbol(ServerResponse)]: [Function: ServerResponse],
           [Symbol(kCapture)]: false,
           [Symbol(async_id_symbol)]: 52
         },
         _server: Server {
           maxHeaderSize: undefined,
           insecureHTTPParser: undefined,
           _events: [Object: null prototype],
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: [TCP],
           _usingWorkers: false,
           _workers: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 0,
           keepAliveTimeout: 5000,
           maxHeadersCount: null,
           headersTimeout: 60000,
           requestTimeout: 0,
           _connectionKey: '6::::5000',
           [Symbol(IncomingMessage)]: [Function: IncomingMessage],
           [Symbol(ServerResponse)]: [Function: ServerResponse],
           [Symbol(kCapture)]: false,
           [Symbol(async_id_symbol)]: 52
         },
         parser: HTTPParser {
           '0': [Function: bound setRequestTimeout],
           '1': [Function: parserOnHeaders],
           '2': [Function: parserOnHeadersComplete],
           '3': [Function: parserOnBody],
           '4': [Function: parserOnMessageComplete],
           '5': [Function: bound onParserExecute],
           '6': [Function: bound onParserTimeout],
           _headers: [],
           _url: '',
           socket: [Circular *1],
           incoming: [Circular *2],
           outgoing: null,
           maxHeaderPairs: 2000,
           _consumed: true,
           onIncoming: [Function: bound parserOnIncoming],
           [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
         },
         on: [Function: socketListenerWrap],
         addListener: [Function: socketListenerWrap],
         prependListener: [Function: socketListenerWrap],
         _paused: false,
         _httpMessage: ServerResponse {
           _events: [Object: null prototype],
           _eventsCount: 2,
           _maxListeners: undefined,
           outputData: [],
           outputSize: 0,
           writable: true,
           destroyed: false,
           _last: false,
           chunkedEncoding: false,
           shouldKeepAlive: false,
           _defaultKeepAlive: true,
           useChunkedEncodingByDefault: true,
           sendDate: true,
           _removedConnection: false,
           _removedContLen: false,
           _removedTE: false,
           _contentLength: null,
           _hasBody: true,
           _trailer: '',
           finished: false,
           _headerSent: false,
           socket: [Circular *1],
           _header: null,
           _keepAliveTimeout: 5000,
           _onPendingData: [Function: bound updateOutgoingData],
           _sent100: false,
           _expect_continue: false,
           req: [Circular *2],
           locals: [Object: null prototype] {},
           _startAt: undefined,
           _startTime: undefined,
           writeHead: [Function: writeHead],
           __onFinished: [Function],
           [Symbol(kCapture)]: false,
           [Symbol(kNeedDrain)]: false,
           [Symbol(corked)]: 0,
           [Symbol(kOutHeaders)]: [Object: null prototype]
         },
         _peername: { address: '::ffff:127.0.0.1', family: 'IPv6', port: 9300 },
         [Symbol(async_id_symbol)]: 92,
         [Symbol(kHandle)]: TCP {
           reading: true,
           onconnection: null,
           _consumed: true,
           [Symbol(owner_symbol)]: [Circular *1]
         },
         [Symbol(kSetNoDelay)]: false,
         [Symbol(lastWriteQueueSize)]: 0,
         [Symbol(timeout)]: null,
         [Symbol(kBuffer)]: null,
         [Symbol(kBufferCb)]: null,
         [Symbol(kBufferGen)]: null,
         [Symbol(kCapture)]: false,
         [Symbol(kBytesRead)]: 0,
         [Symbol(kBytesWritten)]: 0,
         [Symbol(RequestTimeout)]: undefined
       },
       httpVersionMajor: 1,
       httpVersionMinor: 1,
       httpVersion: '1.1',
       complete: true,
       headers: {
         'x-forwarded-host': 'localhost:3000',
         'x-forwarded-proto': 'http',
         'x-forwarded-port': '3000',
         'x-forwarded-for': '127.0.0.1',
         cookie: '_ga=GA1.1.2103000521.1609329677; _gid=GA1.1.1519023603.1609329677',
         'accept-language': 'en-US,en;q=0.9',
         'accept-encoding': 'gzip, deflate, br',
         referer: 'http://localhost:3000/',
         'sec-fetch-dest': 'empty',
         'sec-fetch-mode': 'cors',
         'sec-fetch-site': 'same-origin',
         origin: 'http://localhost:5000/',
         'content-type': 'application/json;charset=UTF-8',
         'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36',
         accept: 'application/json, text/plain, */*',
         'content-length': '244',
         connection: 'close',
         host: 'localhost:5000'
       },
       rawHeaders: [
         'x-forwarded-host',
         'localhost:3000',
         'x-forwarded-proto',
         'http',
         'x-forwarded-port',
         '3000',
         'x-forwarded-for',
         '127.0.0.1',
         'cookie',
         '_ga=GA1.1.2103000521.1609329677; _gid=GA1.1.1519023603.1609329677',
         'accept-language',
         'en-US,en;q=0.9',
         'accept-encoding',
         'gzip, deflate, br',
         'referer',
         'http://localhost:3000/',
         'sec-fetch-dest',
         'empty',
         'sec-fetch-mode',
         'cors',
         'sec-fetch-site',
         'same-origin',
         'origin',
         'http://localhost:5000/',
         'content-type',
         'application/json;charset=UTF-8',
         'user-agent',
         'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36',
         'accept',
         'application/json, text/plain, */*',
         'content-length',
         '244',
         'connection',
         'close',
         'host',
         'localhost:5000'
       ],
       trailers: {},
       rawTrailers: [],
       aborted: false,
       upgrade: false,
       url: '/logout',
       method: 'POST',
       statusCode: null,
       statusMessage: null,
       client: <ref *1> Socket {
         connecting: false,
         _hadError: false,
         _parent: null,
         _host: null,
         _readableState: ReadableState {
           objectMode: false,
           highWaterMark: 16384,
           buffer: BufferList { head: null, tail: null, length: 0 },
           length: 0,
           pipes: [],
           flowing: true,
           ended: false,
           endEmitted: false,
           reading: true,
           sync: false,
           needReadable: true,
           emittedReadable: false,
           readableListening: false,
           resumeScheduled: false,
           errorEmitted: false,
           emitClose: false,
           autoDestroy: false,
           destroyed: false,
           errored: null,
           closed: false,
           closeEmitted: false,
           defaultEncoding: 'utf8',
           awaitDrainWriters: null,
           multiAwaitDrain: false,
           readingMore: false,
           decoder: null,
           encoding: null,
           [Symbol(kPaused)]: false
         },
         _events: [Object: null prototype] {
           end: [Array],
           timeout: [Function: socketOnTimeout],
           data: [Function: bound socketOnData],
           error: [Array],
           close: [Array],
           drain: [Function: bound socketOnDrain],
           resume: [Function: onSocketResume],
           pause: [Function: onSocketPause]
         },
         _eventsCount: 8,
         _maxListeners: undefined,
         _writableState: WritableState {
           objectMode: false,
           highWaterMark: 16384,
           finalCalled: false,
           needDrain: false,
           ending: false,
           ended: false,
           finished: false,
           destroyed: false,
           decodeStrings: false,
           defaultEncoding: 'utf8',
           length: 0,
           writing: false,
           corked: 0,
           sync: true,
           bufferProcessing: false,
           onwrite: [Function: bound onwrite],
           writecb: null,
           writelen: 0,
           afterWriteTickInfo: null,
           buffered: [],
           bufferedIndex: 0,
           allBuffers: true,
           allNoop: true,
           pendingcb: 0,
           prefinished: false,
           errorEmitted: false,
           emitClose: false,
           autoDestroy: false,
           errored: null,
           closed: false,
           closeEmitted: false
         },
         allowHalfOpen: true,
         _sockname: null,
         _pendingData: null,
         _pendingEncoding: '',
         server: Server {
           maxHeaderSize: undefined,
           insecureHTTPParser: undefined,
           _events: [Object: null prototype],
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: [TCP],
           _usingWorkers: false,
           _workers: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 0,
           keepAliveTimeout: 5000,
           maxHeadersCount: null,
           headersTimeout: 60000,
           requestTimeout: 0,
           _connectionKey: '6::::5000',
           [Symbol(IncomingMessage)]: [Function: IncomingMessage],
           [Symbol(ServerResponse)]: [Function: ServerResponse],
           [Symbol(kCapture)]: false,
           [Symbol(async_id_symbol)]: 52
         },
         _server: Server {
           maxHeaderSize: undefined,
           insecureHTTPParser: undefined,
           _events: [Object: null prototype],
           _eventsCount: 2,
           _maxListeners: undefined,
           _connections: 1,
           _handle: [TCP],
           _usingWorkers: false,
           _workers: [],
           _unref: false,
           allowHalfOpen: true,
           pauseOnConnect: false,
           httpAllowHalfOpen: false,
           timeout: 0,
           keepAliveTimeout: 5000,
           maxHeadersCount: null,
           headersTimeout: 60000,
           requestTimeout: 0,
           _connectionKey: '6::::5000',
           [Symbol(IncomingMessage)]: [Function: IncomingMessage],
           [Symbol(ServerResponse)]: [Function: ServerResponse],
           [Symbol(kCapture)]: false,
           [Symbol(async_id_symbol)]: 52
         },
         parser: HTTPParser {
           '0': [Function: bound setRequestTimeout],
           '1': [Function: parserOnHeaders],
           '2': [Function: parserOnHeadersComplete],
           '3': [Function: parserOnBody],
           '4': [Function: parserOnMessageComplete],
           '5': [Function: bound onParserExecute],
           '6': [Function: bound onParserTimeout],
           _headers: [],
           _url: '',
           socket: [Circular *1],
           incoming: [Circular *2],
           outgoing: null,
           maxHeaderPairs: 2000,
           _consumed: true,
           onIncoming: [Function: bound parserOnIncoming],
           [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
         },
         on: [Function: socketListenerWrap],
         addListener: [Function: socketListenerWrap],
         prependListener: [Function: socketListenerWrap],
         _paused: false,
         _httpMessage: ServerResponse {
           _events: [Object: null prototype],
           _eventsCount: 2,
           _maxListeners: undefined,
           outputData: [],
           outputSize: 0,
           writable: true,
           destroyed: false,
           _last: false,
           chunkedEncoding: false,
           shouldKeepAlive: false,
           _defaultKeepAlive: true,
           useChunkedEncodingByDefault: true,
           sendDate: true,
           _removedConnection: false,
           _removedContLen: false,
           _removedTE: false,
           _contentLength: null,
           _hasBody: true,
           _trailer: '',
           finished: false,
           _headerSent: false,
           socket: [Circular *1],
           _header: null,
           _keepAliveTimeout: 5000,
           _onPendingData: [Function: bound updateOutgoingData],
           _sent100: false,
           _expect_continue: false,
           req: [Circular *2],
           locals: [Object: null prototype] {},
           _startAt: undefined,
           _startTime: undefined,
           writeHead: [Function: writeHead],
           __onFinished: [Function],
           [Symbol(kCapture)]: false,
           [Symbol(kNeedDrain)]: false,
           [Symbol(corked)]: 0,
           [Symbol(kOutHeaders)]: [Object: null prototype]
         },
         _peername: { address: '::ffff:127.0.0.1', family: 'IPv6', port: 9300 },
         [Symbol(async_id_symbol)]: 92,
         [Symbol(kHandle)]: TCP {
           reading: true,
           onconnection: null,
           _consumed: true,
           [Symbol(owner_symbol)]: [Circular *1]
         },
         [Symbol(kSetNoDelay)]: false,
         [Symbol(lastWriteQueueSize)]: 0,
         [Symbol(timeout)]: null,
         [Symbol(kBuffer)]: null,
         [Symbol(kBufferCb)]: null,
         [Symbol(kBufferGen)]: null,
         [Symbol(kCapture)]: false,
         [Symbol(kBytesRead)]: 0,
         [Symbol(kBytesWritten)]: 0,
         [Symbol(RequestTimeout)]: undefined
       },
       _consuming: true,
       _dumped: false,
       next: [Function: next],
       baseUrl: '/api/users',
       originalUrl: '/api/users/logout',
       _parsedUrl: Url {
         protocol: null,
         slashes: null,
         auth: null,
         host: null,
         port: null,
         hostname: null,
         hash: null,
         search: null,
         query: null,
         pathname: '/logout',
         path: '/logout',
         href: '/logout',
         _raw: '/logout'
       },
       params: {},
       query: {},
       res: <ref *3> ServerResponse {
         _events: [Object: null prototype] {
           finish: [Array],
           end: [Function: onevent]
         },
         _eventsCount: 2,
         _maxListeners: undefined,
         outputData: [],
         outputSize: 0,
         writable: true,
         destroyed: false,
         _last: false,
         chunkedEncoding: false,
         shouldKeepAlive: false,
         _defaultKeepAlive: true,
         useChunkedEncodingByDefault: true,
         sendDate: true,
         _removedConnection: false,
         _removedContLen: false,
         _removedTE: false,
         _contentLength: null,
         _hasBody: true,
         _trailer: '',
         finished: false,
         _headerSent: false,
         socket: <ref *1> Socket {
           connecting: false,
           _hadError: false,
           _parent: null,
           _host: null,
           _readableState: [ReadableState],
           _events: [Object: null prototype],
           _eventsCount: 8,
           _maxListeners: undefined,
           _writableState: [WritableState],
           allowHalfOpen: true,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server: [Server],
           _server: [Server],
           parser: [HTTPParser],
           on: [Function: socketListenerWrap],
           addListener: [Function: socketListenerWrap],
           prependListener: [Function: socketListenerWrap],
           _paused: false,
           _httpMessage: [Circular *3],
           _peername: [Object],
           [Symbol(async_id_symbol)]: 92,
           [Symbol(kHandle)]: [TCP],
           [Symbol(kSetNoDelay)]: false,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]: null,
           [Symbol(kBuffer)]: null,
           [Symbol(kBufferCb)]: null,
           [Symbol(kBufferGen)]: null,
           [Symbol(kCapture)]: false,
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0,
           [Symbol(RequestTimeout)]: undefined
         },
         _header: null,
         _keepAliveTimeout: 5000,
         _onPendingData: [Function: bound updateOutgoingData],
         _sent100: false,
         _expect_continue: false,
         req: [Circular *2],
         locals: [Object: null prototype] {},
         _startAt: undefined,
         _startTime: undefined,
         writeHead: [Function: writeHead],
         __onFinished: [Function: listener] { queue: [Array] },
         [Symbol(kCapture)]: false,
         [Symbol(kNeedDrain)]: false,
         [Symbol(corked)]: 0,
         [Symbol(kOutHeaders)]: [Object: null prototype] { 'x-powered-by': [Array] }
       },
       _startAt: [ 1302729, 159404300 ],
       _startTime: 2020-12-31T10:18:06.397Z,
       _remoteAddress: '::ffff:127.0.0.1',
       body: {
         headers: {
           'Content-Type': 'application/json',
           Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVmZTA5YjUwMDY2NGVkNjExMGI3YzAxNiIsImlhdCI6MTYwOTQwOTg1NiwiZXhwIjoxNjA5NDEzNDU2fQ.IWnUpnCyBn__ZvCd2JuM16KHD_H7i29I3LYEaxDQ96c'
         }
       },
       _body: true,
       length: undefined,
       route: Route {
         path: '/logout',
         stack: [ [Layer] ],
         methods: { post: true }
       },
       [Symbol(kCapture)]: false,
       [Symbol(RequestTimeout)]: undefined
     }