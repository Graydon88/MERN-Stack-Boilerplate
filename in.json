Headers: <ref *2> IncomingMessage {
    [0]   _readableState: ReadableState {
    [0]     objectMode: false,
    [0]     highWaterMark: 16384,
    [0]     buffer: BufferList { head: null, tail: null, length: 0 },
    [0]     length: 0,
    [0]     pipes: [],
    [0]     flowing: true,
    [0]     ended: true,
    [0]     endEmitted: true,
    [0]     reading: false,
    [0]     sync: false,
    [0]     needReadable: false,
    [0]     emittedReadable: false,
    [0]     readableListening: false,
    [0]     resumeScheduled: false,
    [0]     errorEmitted: false,
    [0]     emitClose: true,
    [0]     autoDestroy: false,
    [0]     destroyed: false,
    [0]     errored: null,
    [0]     closed: false,
    [0]     closeEmitted: false,
    [0]     defaultEncoding: 'utf8',
    [0]     awaitDrainWriters: null,
    [0]     multiAwaitDrain: false,
    [0]     readingMore: false,
    [0]     decoder: null,
    [0]     encoding: null,
    [0]     [Symbol(kPaused)]: false
    [0]   },
    [0]   _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
    [0]   _eventsCount: 1,
    [0]   _maxListeners: undefined,
    [0]   socket: <ref *1> Socket {
    [0]     connecting: false,
    [0]     _hadError: false,
    [0]     _parent: null,
    [0]     _host: null,
    [0]     _readableState: ReadableState {
    [0]       objectMode: false,
    [0]       highWaterMark: 16384,
    [0]       buffer: BufferList { head: null, tail: null, length: 0 },
    [0]       length: 0,
    [0]       pipes: [],
    [0]       flowing: true,
    [0]       ended: false,
    [0]       endEmitted: false,
    [0]       reading: true,
    [0]       sync: false,
    [0]       needReadable: true,
    [0]       emittedReadable: false,
    [0]       readableListening: false,
    [0]       resumeScheduled: false,
    [0]       errorEmitted: false,
    [0]       emitClose: false,
    [0]       autoDestroy: false,
    [0]       destroyed: false,
    [0]       errored: null,
    [0]       closed: false,
    [0]       closeEmitted: false,
    [0]       defaultEncoding: 'utf8',
    [0]       awaitDrainWriters: null,
    [0]       multiAwaitDrain: false,
    [0]       readingMore: false,
    [0]       decoder: null,
    [0]       encoding: null,
    [0]       [Symbol(kPaused)]: false
    [0]     },
    [0]     _events: [Object: null prototype] {
    [0]       end: [Array],
    [0]       timeout: [Function: socketOnTimeout],
    [0]       data: [Function: bound socketOnData],
    [0]       error: [Array],
    [0]       close: [Array],
    [0]       drain: [Function: bound socketOnDrain],
    [0]       resume: [Function: onSocketResume],
    [0]       pause: [Function: onSocketPause]
    [0]     },
    [0]     _eventsCount: 8,
    [0]     _maxListeners: undefined,
    [0]     _writableState: WritableState {
    [0]       objectMode: false,
    [0]       highWaterMark: 16384,
    [0]       finalCalled: false,
    [0]       needDrain: false,
    [0]       ending: false,
    [0]       ended: false,
    [0]       finished: false,
    [0]       destroyed: false,
    [0]       decodeStrings: false,
    [0]       defaultEncoding: 'utf8',
    [0]       length: 0,
    [0]       writing: false,
    [0]       corked: 0,
    [0]       sync: false,
    [0]       bufferProcessing: false,
    [0]       onwrite: [Function: bound onwrite],
    [0]       writecb: null,
    [0]       writelen: 0,
    [0]       afterWriteTickInfo: [Object],
    [0]       buffered: [],
    [0]       bufferedIndex: 0,
    [0]       allBuffers: true,
    [0]       allNoop: true,
    [0]       pendingcb: 1,
    [0]       prefinished: false,
    [0]       errorEmitted: false,
    [0]       emitClose: false,
    [0]       autoDestroy: false,
    [0]       errored: null,
    [0]       closed: false,
    [0]       closeEmitted: false
    [0]     },
    [0]     allowHalfOpen: true,
    [0]     _sockname: null,
    [0]     _pendingData: null,
    [0]     _pendingEncoding: '',
    [0]     server: Server {
    [0]       maxHeaderSize: undefined,
    [0]       insecureHTTPParser: undefined,
    [0]       _events: [Object: null prototype],
    [0]       _eventsCount: 2,
    [0]       _maxListeners: undefined,
    [0]       _connections: 1,
    [0]       _handle: [TCP],
    [0]       _usingWorkers: false,
    [0]       _workers: [],
    [0]       _unref: false,
    [0]       allowHalfOpen: true,
    [0]       pauseOnConnect: false,
    [0]       httpAllowHalfOpen: false,
    [0]       timeout: 0,
    [0]       keepAliveTimeout: 5000,
    [0]       maxHeadersCount: null,
    [0]       headersTimeout: 60000,
    [0]       requestTimeout: 0,
    [0]       _connectionKey: '6::::5000',
    [0]       [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [0]       [Symbol(ServerResponse)]: [Function: ServerResponse],
    [0]       [Symbol(kCapture)]: false,
    [0]       [Symbol(async_id_symbol)]: 52
    [0]     },
    [0]     _server: Server {
    [0]       maxHeaderSize: undefined,
    [0]       insecureHTTPParser: undefined,
    [0]       _events: [Object: null prototype],
    [0]       _eventsCount: 2,
    [0]       _maxListeners: undefined,
    [0]       _connections: 1,
    [0]       _handle: [TCP],
    [0]       _usingWorkers: false,
    [0]       _workers: [],
    [0]       _unref: false,
    [0]       allowHalfOpen: true,
    [0]       pauseOnConnect: false,
    [0]       httpAllowHalfOpen: false,
    [0]       timeout: 0,
    [0]       keepAliveTimeout: 5000,
    [0]       maxHeadersCount: null,
    [0]       headersTimeout: 60000,
    [0]       requestTimeout: 0,
    [0]       _connectionKey: '6::::5000',
    [0]       [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [0]       [Symbol(ServerResponse)]: [Function: ServerResponse],
    [0]       [Symbol(kCapture)]: false,
    [0]       [Symbol(async_id_symbol)]: 52
    [0]     },
    [0]     parser: HTTPParser {
    [0]       '0': [Function: bound setRequestTimeout],
    [0]       '1': [Function: parserOnHeaders],
    [0]       '2': [Function: parserOnHeadersComplete],
    [0]       '3': [Function: parserOnBody],
    [0]       '4': [Function: parserOnMessageComplete],
    [0]       '5': [Function: bound onParserExecute],
    [0]       '6': [Function: bound onParserTimeout],
    [0]       _headers: [],
    [0]       _url: '',
    [0]       socket: [Circular *1],
    [0]       incoming: [Circular *2],
    [0]       outgoing: null,
    [0]       maxHeaderPairs: 2000,
    [0]       _consumed: true,
    [0]       onIncoming: [Function: bound parserOnIncoming],
    [0]       [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    [0]     },
    [0]     on: [Function: socketListenerWrap],
    [0]     addListener: [Function: socketListenerWrap],
    [0]     prependListener: [Function: socketListenerWrap],
    [0]     _paused: false,
    [0]     _httpMessage: ServerResponse {
    [0]       _events: [Object: null prototype],
    [0]       _eventsCount: 2,
    [0]       _maxListeners: undefined,
    [0]       outputData: [],
    [0]       outputSize: 0,
    [0]       writable: true,
    [0]       destroyed: false,
    [0]       _last: true,
    [0]       chunkedEncoding: false,
    [0]       shouldKeepAlive: false,
    [0]       _defaultKeepAlive: true,
    [0]       useChunkedEncodingByDefault: true,
    [0]       sendDate: true,
    [0]       _removedConnection: false,
    [0]       _removedContLen: false,
    [0]       _removedTE: false,
    [0]       _contentLength: 269,
    [0]       _hasBody: true,
    [0]       _trailer: '',
    [0]       finished: true,
    [0]       _headerSent: true,
    [0]       socket: [Circular *1],
    [0]       _header: 'HTTP/1.1 200 OK\r\n' +
    [0]         'X-Powered-By: Express\r\n' +
    [0]         'Content-Type: application/json; charset=utf-8\r\n' +
    [0]         'Content-Length: 269\r\n' +
    [0]         'ETag: W/"10d-bV2+5D2TRvhcVRooDj4+IZ2oXgg"\r\n' +
    [0]         'Date: Thu, 31 Dec 2020 10:17:36 GMT\r\n' +
    [0]         'Connection: close\r\n' +
    [0]         '\r\n',
    [0]       _keepAliveTimeout: 5000,
    [0]       _onPendingData: [Function: bound updateOutgoingData],
    [0]       _sent100: false,
    [0]       _expect_continue: false,
    [0]       req: [Circular *2],
    [0]       locals: [Object: null prototype] {},
    [0]       _startAt: [Array],
    [0]       _startTime: 2020-12-31T10:17:36.490Z,
    [0]       writeHead: [Function: writeHead],
    [0]       __onFinished: [Function],
    [0]       statusCode: 200,
    [0]       statusMessage: 'OK',
    [0]       [Symbol(kCapture)]: false,
    [0]       [Symbol(kNeedDrain)]: false,
    [0]       [Symbol(corked)]: 0,
    [0]       [Symbol(kOutHeaders)]: [Object: null prototype]
    [0]     },
    [0]     _peername: { address: '::ffff:127.0.0.1', family: 'IPv6', port: 9214 },
    [0]     [Symbol(async_id_symbol)]: 92,
    [0]     [Symbol(kHandle)]: TCP {
    [0]       reading: true,
    [0]       onconnection: null,
    [0]       _consumed: true,
    [0]       [Symbol(owner_symbol)]: [Circular *1]
    [0]     },
    [0]     [Symbol(kSetNoDelay)]: false,
    [0]     [Symbol(lastWriteQueueSize)]: 0,
    [0]     [Symbol(timeout)]: null,
    [0]     [Symbol(kBuffer)]: null,
    [0]     [Symbol(kBufferCb)]: null,
    [0]     [Symbol(kBufferGen)]: null,
    [0]     [Symbol(kCapture)]: false,
    [0]     [Symbol(kBytesRead)]: 0,
    [0]     [Symbol(kBytesWritten)]: 0,
    [0]     [Symbol(RequestTimeout)]: undefined
    [0]   },
    [0]   httpVersionMajor: 1,
    [0]   httpVersionMinor: 1,
    [0]   httpVersion: '1.1',
    [0]   complete: true,
    [0]   headers: {
    [0]     'x-forwarded-host': 'localhost:3000',
    [0]     'x-forwarded-proto': 'http',
    [0]     'x-forwarded-port': '3000',
    [0]     'x-forwarded-for': '127.0.0.1',
    [0]     cookie: '_ga=GA1.1.2103000521.1609329677; _gid=GA1.1.1519023603.1609329677',
    [0]     'accept-language': 'en-US,en;q=0.9',
    [0]     'accept-encoding': 'gzip, deflate, br',
    [0]     referer: 'http://localhost:3000/login',
    [0]     'sec-fetch-dest': 'empty',
    [0]     'sec-fetch-mode': 'cors',
    [0]     'sec-fetch-site': 'same-origin',
    [0]     origin: 'http://localhost:5000/',
    [0]     'content-type': 'application/json',
    [0]     'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36',
    [0]     accept: 'application/json, text/plain, */*',
    [0]     'content-length': '42',
    [0]     connection: 'close',
    [0]     host: 'localhost:5000'
    [0]   },
    [0]   rawHeaders: [
    [0]     'x-forwarded-host',
    [0]     'localhost:3000',
    [0]     'x-forwarded-proto',
    [0]     'http',
    [0]     'x-forwarded-port',
    [0]     '3000',
    [0]     'x-forwarded-for',
    [0]     '127.0.0.1',
    [0]     'cookie',
    [0]     '_ga=GA1.1.2103000521.1609329677; _gid=GA1.1.1519023603.1609329677',
    [0]     'accept-language',
    [0]     'en-US,en;q=0.9',
    [0]     'accept-encoding',
    [0]     'gzip, deflate, br',
    [0]     'referer',
    [0]     'http://localhost:3000/login',
    [0]     'sec-fetch-dest',
    [0]     'empty',
    [0]     'sec-fetch-mode',
    [0]     'cors',
    [0]     'sec-fetch-site',
    [0]     'same-origin',
    [0]     'origin',
    [0]     'http://localhost:5000/',
    [0]     'content-type',
    [0]     'application/json',
    [0]     'user-agent',
    [0]     'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36',
    [0]     'accept',
    [0]     'application/json, text/plain, */*',
    [0]     'content-length',
    [0]     '42',
    [0]     'connection',
    [0]     'close',
    [0]     'host',
    [0]     'localhost:5000'
    [0]   ],
    [0]   trailers: {},
    [0]   rawTrailers: [],
    [0]   aborted: false,
    [0]   upgrade: false,
    [0]   url: '/login',
    [0]   method: 'POST',
    [0]   statusCode: null,
    [0]   statusMessage: null,
    [0]   client: <ref *1> Socket {
    [0]     connecting: false,
    [0]     _hadError: false,
    [0]     _parent: null,
    [0]     _host: null,
    [0]     _readableState: ReadableState {
    [0]       objectMode: false,
    [0]       highWaterMark: 16384,
    [0]       buffer: BufferList { head: null, tail: null, length: 0 },
    [0]       length: 0,
    [0]       pipes: [],
    [0]       flowing: true,
    [0]       ended: false,
    [0]       endEmitted: false,
    [0]       reading: true,
    [0]       sync: false,
    [0]       needReadable: true,
    [0]       emittedReadable: false,
    [0]       readableListening: false,
    [0]       resumeScheduled: false,
    [0]       errorEmitted: false,
    [0]       emitClose: false,
    [0]       autoDestroy: false,
    [0]       destroyed: false,
    [0]       errored: null,
    [0]       closed: false,
    [0]       closeEmitted: false,
    [0]       defaultEncoding: 'utf8',
    [0]       awaitDrainWriters: null,
    [0]       multiAwaitDrain: false,
    [0]       readingMore: false,
    [0]       decoder: null,
    [0]       encoding: null,
    [0]       [Symbol(kPaused)]: false
    [0]     },
    [0]     _events: [Object: null prototype] {
    [0]       end: [Array],
    [0]       timeout: [Function: socketOnTimeout],
    [0]       data: [Function: bound socketOnData],
    [0]       error: [Array],
    [0]       close: [Array],
    [0]       drain: [Function: bound socketOnDrain],
    [0]       resume: [Function: onSocketResume],
    [0]       pause: [Function: onSocketPause]
    [0]     },
    [0]     _eventsCount: 8,
    [0]     _maxListeners: undefined,
    [0]     _writableState: WritableState {
    [0]       objectMode: false,
    [0]       highWaterMark: 16384,
    [0]       finalCalled: false,
    [0]       needDrain: false,
    [0]       ending: false,
    [0]       ended: false,
    [0]       finished: false,
    [0]       destroyed: false,
    [0]       decodeStrings: false,
    [0]       defaultEncoding: 'utf8',
    [0]       length: 0,
    [0]       writing: false,
    [0]       corked: 0,
    [0]       sync: false,
    [0]       bufferProcessing: false,
    [0]       onwrite: [Function: bound onwrite],
    [0]       writecb: null,
    [0]       writelen: 0,
    [0]       afterWriteTickInfo: [Object],
    [0]       buffered: [],
    [0]       bufferedIndex: 0,
    [0]       allBuffers: true,
    [0]       allNoop: true,
    [0]       pendingcb: 1,
    [0]       prefinished: false,
    [0]       errorEmitted: false,
    [0]       emitClose: false,
    [0]       autoDestroy: false,
    [0]       errored: null,
    [0]       closed: false,
    [0]       closeEmitted: false
    [0]     },
    [0]     allowHalfOpen: true,
    [0]     _sockname: null,
    [0]     _pendingData: null,
    [0]     _pendingEncoding: '',
    [0]     server: Server {
    [0]       maxHeaderSize: undefined,
    [0]       insecureHTTPParser: undefined,
    [0]       _events: [Object: null prototype],
    [0]       _eventsCount: 2,
    [0]       _maxListeners: undefined,
    [0]       _connections: 1,
    [0]       _handle: [TCP],
    [0]       _usingWorkers: false,
    [0]       _workers: [],
    [0]       _unref: false,
    [0]       allowHalfOpen: true,
    [0]       pauseOnConnect: false,
    [0]       httpAllowHalfOpen: false,
    [0]       timeout: 0,
    [0]       keepAliveTimeout: 5000,
    [0]       maxHeadersCount: null,
    [0]       headersTimeout: 60000,
    [0]       requestTimeout: 0,
    [0]       _connectionKey: '6::::5000',
    [0]       [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [0]       [Symbol(ServerResponse)]: [Function: ServerResponse],
    [0]       [Symbol(kCapture)]: false,
    [0]       [Symbol(async_id_symbol)]: 52
    [0]     },
    [0]     _server: Server {
    [0]       maxHeaderSize: undefined,
    [0]       insecureHTTPParser: undefined,
    [0]       _events: [Object: null prototype],
    [0]       _eventsCount: 2,
    [0]       _maxListeners: undefined,
    [0]       _connections: 1,
    [0]       _handle: [TCP],
    [0]       _usingWorkers: false,
    [0]       _workers: [],
    [0]       _unref: false,
    [0]       allowHalfOpen: true,
    [0]       pauseOnConnect: false,
    [0]       httpAllowHalfOpen: false,
    [0]       timeout: 0,
    [0]       keepAliveTimeout: 5000,
    [0]       maxHeadersCount: null,
    [0]       headersTimeout: 60000,
    [0]       requestTimeout: 0,
    [0]       _connectionKey: '6::::5000',
    [0]       [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [0]       [Symbol(ServerResponse)]: [Function: ServerResponse],
    [0]       [Symbol(kCapture)]: false,
    [0]       [Symbol(async_id_symbol)]: 52
    [0]     },
    [0]     parser: HTTPParser {
    [0]       '0': [Function: bound setRequestTimeout],
    [0]       '1': [Function: parserOnHeaders],
    [0]       '2': [Function: parserOnHeadersComplete],
    [0]       '3': [Function: parserOnBody],
    [0]       '4': [Function: parserOnMessageComplete],
    [0]       '5': [Function: bound onParserExecute],
    [0]       '6': [Function: bound onParserTimeout],
    [0]       _headers: [],
    [0]       _url: '',
    [0]       socket: [Circular *1],
    [0]       incoming: [Circular *2],
    [0]       outgoing: null,
    [0]       maxHeaderPairs: 2000,
    [0]       _consumed: true,
    [0]       onIncoming: [Function: bound parserOnIncoming],
    [0]       [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    [0]     },
    [0]     on: [Function: socketListenerWrap],
    [0]     addListener: [Function: socketListenerWrap],
    [0]     prependListener: [Function: socketListenerWrap],
    [0]     _paused: false,
    [0]     _httpMessage: ServerResponse {
    [0]       _events: [Object: null prototype],
    [0]       _eventsCount: 2,
    [0]       _maxListeners: undefined,
    [0]       outputData: [],
    [0]       outputSize: 0,
    [0]       writable: true,
    [0]       destroyed: false,
    [0]       _last: true,
    [0]       chunkedEncoding: false,
    [0]       shouldKeepAlive: false,
    [0]       _defaultKeepAlive: true,
    [0]       useChunkedEncodingByDefault: true,
    [0]       sendDate: true,
    [0]       _removedConnection: false,
    [0]       _removedContLen: false,
    [0]       _removedTE: false,
    [0]       _contentLength: 269,
    [0]       _hasBody: true,
    [0]       _trailer: '',
    [0]       finished: true,
    [0]       _headerSent: true,
    [0]       socket: [Circular *1],
    [0]       _header: 'HTTP/1.1 200 OK\r\n' +
    [0]         'X-Powered-By: Express\r\n' +
    [0]         'Content-Type: application/json; charset=utf-8\r\n' +
    [0]         'Content-Length: 269\r\n' +
    [0]         'ETag: W/"10d-bV2+5D2TRvhcVRooDj4+IZ2oXgg"\r\n' +
    [0]         'Date: Thu, 31 Dec 2020 10:17:36 GMT\r\n' +
    [0]         'Connection: close\r\n' +
    [0]         '\r\n',
    [0]       _keepAliveTimeout: 5000,
    [0]       _onPendingData: [Function: bound updateOutgoingData],
    [0]       _sent100: false,
    [0]       _expect_continue: false,
    [0]       req: [Circular *2],
    [0]       locals: [Object: null prototype] {},
    [0]       _startAt: [Array],
    [0]       _startTime: 2020-12-31T10:17:36.490Z,
    [0]       writeHead: [Function: writeHead],
    [0]       __onFinished: [Function],
    [0]       statusCode: 200,
    [0]       statusMessage: 'OK',
    [0]       [Symbol(kCapture)]: false,
    [0]       [Symbol(kNeedDrain)]: false,
    [0]       [Symbol(corked)]: 0,
    [0]       [Symbol(kOutHeaders)]: [Object: null prototype]
    [0]     },
    [0]     _peername: { address: '::ffff:127.0.0.1', family: 'IPv6', port: 9214 },
    [0]     [Symbol(async_id_symbol)]: 92,
    [0]     [Symbol(kHandle)]: TCP {
    [0]       reading: true,
    [0]       onconnection: null,
    [0]       _consumed: true,
    [0]       [Symbol(owner_symbol)]: [Circular *1]
    [0]     },
    [0]     [Symbol(kSetNoDelay)]: false,
    [0]     [Symbol(lastWriteQueueSize)]: 0,
    [0]     [Symbol(timeout)]: null,
    [0]     [Symbol(kBuffer)]: null,
    [0]     [Symbol(kBufferCb)]: null,
    [0]     [Symbol(kBufferGen)]: null,
    [0]     [Symbol(kCapture)]: false,
    [0]     [Symbol(kBytesRead)]: 0,
    [0]     [Symbol(kBytesWritten)]: 0,
    [0]     [Symbol(RequestTimeout)]: undefined
    [0]   },
    [0]   _consuming: true,
    [0]   _dumped: false,
    [0]   next: [Function: next],
    [0]   baseUrl: '/api/users',
    [0]   originalUrl: '/api/users/login',
    [0]   _parsedUrl: Url {
    [0]     protocol: null,
    [0]     slashes: null,
    [0]     auth: null,
    [0]     host: null,
    [0]     port: null,
    [0]     hostname: null,
    [0]     hash: null,
    [0]     search: null,
    [0]     query: null,
    [0]     pathname: '/login',
    [0]     path: '/login',
    [0]     href: '/login',
    [0]     _raw: '/login'
    [0]   },
    [0]   params: {},
    [0]   query: {},
    [0]   res: <ref *3> ServerResponse {
    [0]     _events: [Object: null prototype] {
    [0]       finish: [Array],
    [0]       end: [Function: onevent]
    [0]     },
    [0]     _eventsCount: 2,
    [0]     _maxListeners: undefined,
    [0]     outputData: [],
    [0]     outputSize: 0,
    [0]     writable: true,
    [0]     destroyed: false,
    [0]     _last: true,
    [0]     chunkedEncoding: false,
    [0]     shouldKeepAlive: false,
    [0]     _defaultKeepAlive: true,
    [0]     useChunkedEncodingByDefault: true,
    [0]     sendDate: true,
    [0]     _removedConnection: false,
    [0]     _removedContLen: false,
    [0]     _removedTE: false,
    [0]     _contentLength: 269,
    [0]     _hasBody: true,
    [0]     _trailer: '',
    [0]     finished: true,
    [0]     _headerSent: true,
    [0]     socket: <ref *1> Socket {
    [0]       connecting: false,
    [0]       _hadError: false,
    [0]       _parent: null,
    [0]       _host: null,
    [0]       _readableState: [ReadableState],
    [0]       _events: [Object: null prototype],
    [0]       _eventsCount: 8,
    [0]       _maxListeners: undefined,
    [0]       _writableState: [WritableState],
    [0]       allowHalfOpen: true,
    [0]       _sockname: null,
    [0]       _pendingData: null,
    [0]       _pendingEncoding: '',
    [0]       server: [Server],
    [0]       _server: [Server],
    [0]       parser: [HTTPParser],
    [0]       on: [Function: socketListenerWrap],
    [0]       addListener: [Function: socketListenerWrap],
    [0]       prependListener: [Function: socketListenerWrap],
    [0]       _paused: false,
    [0]       _httpMessage: [Circular *3],
    [0]       _peername: [Object],
    [0]       [Symbol(async_id_symbol)]: 92,
    [0]       [Symbol(kHandle)]: [TCP],
    [0]       [Symbol(kSetNoDelay)]: false,
    [0]       [Symbol(lastWriteQueueSize)]: 0,
    [0]       [Symbol(timeout)]: null,
    [0]       [Symbol(kBuffer)]: null,
    [0]       [Symbol(kBufferCb)]: null,
    [0]       [Symbol(kBufferGen)]: null,
    [0]       [Symbol(kCapture)]: false,
    [0]       [Symbol(kBytesRead)]: 0,
    [0]       [Symbol(kBytesWritten)]: 0,
    [0]       [Symbol(RequestTimeout)]: undefined
    [0]     },
    [0]     _header: 'HTTP/1.1 200 OK\r\n' +
    [0]       'X-Powered-By: Express\r\n' +
    [0]       'Content-Type: application/json; charset=utf-8\r\n' +
    [0]       'Content-Length: 269\r\n' +
    [0]       'ETag: W/"10d-bV2+5D2TRvhcVRooDj4+IZ2oXgg"\r\n' +
    [0]       'Date: Thu, 31 Dec 2020 10:17:36 GMT\r\n' +
    [0]       'Connection: close\r\n' +
    [0]       '\r\n',
    [0]     _keepAliveTimeout: 5000,
    [0]     _onPendingData: [Function: bound updateOutgoingData],
    [0]     _sent100: false,
    [0]     _expect_continue: false,
    [0]     req: [Circular *2],
    [0]     locals: [Object: null prototype] {},
    [0]     _startAt: [ 1302699, 252672200 ],
    [0]     _startTime: 2020-12-31T10:17:36.490Z,
    [0]     writeHead: [Function: writeHead],
    [0]     __onFinished: [Function: listener] { queue: [Array] },
    [0]     statusCode: 200,
    [0]     statusMessage: 'OK',
    [0]     [Symbol(kCapture)]: false,
    [0]     [Symbol(kNeedDrain)]: false,
    [0]     [Symbol(corked)]: 0,
    [0]     [Symbol(kOutHeaders)]: [Object: null prototype] {
    [0]       'x-powered-by': [Array],
    [0]       'content-type': [Array],
    [0]       'content-length': [Array],
    [0]       etag: [Array]
    [0]     }
    [0]   },
    [0]   _startAt: [ 1302699, 97100400 ],
    [0]   _startTime: 2020-12-31T10:17:36.335Z,
    [0]   _remoteAddress: '::ffff:127.0.0.1',
    [0]   body: { email: 'john@mail.com', password: '123' },
    [0]   _body: true,
    [0]   length: undefined,
    [0]   route: Route { path: '/login', stack: [ [Layer] ], methods: { post: true } },
    [0]   [Symbol(kCapture)]: false,
    [0]   [Symbol(RequestTimeout)]: undefined
    [0] }